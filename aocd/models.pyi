import datetime

import bs4
import typing as t

_Answer = int | t.Text | None
_Result = t.TypedDict("_Result", {"time": datetime.timedelta, "rank": int, "score": int})

TUser = t.TypeVar("TUser", bound="User")

class User:
    token: t.Text

    def __init__(self, token: t.Text) -> None: ...
    @classmethod
    def from_id(cls, id: t.Text) -> TUser: ...
    @property
    def auth(self) -> dict[t.Text, t.Text]: ...
    @property
    def id(self) -> t.Text: ...
    @property
    def memo_dir(self) -> t.Text: ...
    def get_stats(
        self,
        years: t.Iterable[int] | int | None = ...,
    ) -> dict[tuple[int, int], dict[t.Literal["a", "b"], _Result]]: ...

def default_user() -> User: ...

class Puzzle:
    year: int
    day: int
    input_data_url: t.Text
    submit_url: t.Text
    input_data_fname: t.Text
    example_input_data_fname: t.Text
    answer_a_fname: t.Text
    answer_b_fname: t.Text
    incorrect_answers_a_fname: t.Text
    incorrect_answers_b_fname: t.Text
    title_fname: t.Text

    def __init__(self, year: int, day: int, user: User | None = ...) -> None: ...
    @property
    def user(self) -> User: ...
    @property
    def input_data(self) -> t.Text: ...
    @property
    def example_data(self) -> t.Text: ...
    @property
    def title(self) -> t.Text: ...
    @property
    def answer_a(self) -> _Answer: ...
    @answer_a.setter
    def answer_a(self, val: _Answer) -> None: ...
    @property
    def answered_a(self) -> bool: ...
    @property
    def answer_b(self) -> _Answer: ...
    @answer_b.setter
    def answer_b(self, val: _Answer) -> None: ...
    @property
    def answered_b(self) -> bool: ...
    def answered(self, part: t.Literal["a", "b"]) -> bool: ...
    @property
    def answers(self) -> tuple[_Answer, _Answer]: ...
    @answers.setter
    def answers(self, val: tuple[_Answer, _Answer]) -> None: ...
    @property
    def incorrect_answers_a(self) -> dict[t.Text, t.Text]: ...
    @property
    def incorrect_answers_b(self) -> dict[t.Text, t.Text]: ...
    def solve(self) -> tuple[_Answer, _Answer]: ...
    def solve_for(self, plugin: t.Text) -> tuple[_Answer, _Answer]: ...
    @property
    def url(self) -> t.Text: ...
    def view(self) -> None: ...
    @property
    def my_stats(self) -> dict[t.Literal["a", "b"], _Result]: ...
    @property
    def easter_eggs(self) -> bs4.ResultSet[bs4.Tag]: ...
